{"version":3,"sources":["Bar.js","SortingVisualizer.jsx","App.jsx","index.js"],"names":["Bar","className","this","props","active","state","style","height","Component","ARRAY_LENGTH","SLEEP","SortingVisualizer","array","curr","sleep","resetArray","min","max","i","bar","value","Math","floor","random","id","Date","now","push","setState","x","length","newsped","window","location","reload","duration","onClick","padding","color","styles","margin","axis","xmin","xmax","onChange","updateLengthAndSpeed","doBubbleSort","doSelectionSort","borderRight","StopSorting","enterAnimation","leaveAnimation","map","idx","newArray","a","b","temp","arr","running","len","j","prevState","setBarState","swap","n","milliseconds","Promise","resolve","setTimeout","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7cc69adc.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nexport default class Bar extends Component{\r\n    // constructor(props){\r\n    //     super(props)\r\n    // }\r\n    render(){\r\n        let className = \"bar\"\r\n        if(this.props.active)\r\n        {\r\n            className = \"bar  active\"\r\n        }\r\n        if(this.props.state === \"sorted\")\r\n        {\r\n            className = 'bar sorted'\r\n        }\r\n        if(this.props.state === \"compare\")\r\n        {\r\n            className = 'bar compare'\r\n        }\r\n            return <div className={className}  style={{height: `calc((100vh - ${this.props.height*0.1}vh)*0.75)`}} ></div>\r\n    }\r\n}\r\n\r\n// function arrow(){\r\n//     return <div className='arrow-down'> </div>\r\n// }","import React, {Component} from 'react'\r\nimport Bar from \"./Bar\"\r\nimport FlipMove from 'react-flip-move'\r\nimport Slider from 'react-input-slider';\r\n\r\nvar ARRAY_LENGTH =10;\r\nvar SLEEP = 1000\r\n\r\nexport default class SortingVisualizer extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            array :[],\r\n            curr:null,\r\n            sleep :5,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n    resetArray(){\r\n        var array=[]\r\n        for (let i = 0; i < ARRAY_LENGTH; i++) {\r\n            var bar = {value: randomIntFromInterval(10,1000), state: 'unsorted',id : Date.now() * i+1}\r\n            array.push(bar)\r\n        }\r\n        \r\n        this.setState({array})\r\n        this.setState({curr:null})\r\n    }\r\n    \r\n    updateLengthAndSpeed(x){\r\n        if (x === this.state.array.length)\r\n            return\r\n        this.setState({array:[]})\r\n        ARRAY_LENGTH = x; \r\n        this.resetArray()\r\n        this.setState({sleep:x})\r\n        let newsped = (-1000/95)*(this.state.sleep-100) \r\n        SLEEP = newsped\r\n    }   \r\n    StopSorting(){\r\n        window.location.reload();\r\n    }\r\n\r\n    render(){\r\n        const {array,curr,sleep} = this.state \r\n        var duration = 100;\r\n        if (array.length > 60)\r\n            duration = 0 \r\n        return(<div>\r\n            <ul>\r\n                <li><a  onClick={() => this.resetArray()}>Generate new array</a></li>\r\n                <li style={{ padding:'30px'}}>\r\n                    <p style={{color:'white'}}>change array speed & length</p>\r\n                <Slider className='slider' styles={{margin:'10px'}} axis=\"x\" x={ARRAY_LENGTH} xmin={5} xmax={100} onChange={({x}) => this.updateLengthAndSpeed(x)}/>\r\n                </li>\r\n                <li><a onClick={() => this.doBubbleSort(array)}>Start Bubble Sort</a></li>\r\n                <li><a  onClick={() => this.doSelectionSort(array)}>Start Selection Sort</a></li>\r\n                <li><a  onClick={() => this.doSelectionSort(array)}>Start Insertion Sort</a></li>\r\n                <li style={{ borderRight:'none'}}><a  onClick={() => this.StopSorting()}>Restart Everything!</a></li>\r\n            </ul>\r\n                 <div className='container'>\r\n                     <FlipMove className='container' enterAnimation=\"none\" leaveAnimation='none' duration={duration} >\r\n\r\n                {array.map((bar, idx) =>(\r\n                    <Bar key={bar.id} height ={bar.value} active={curr === idx} state={bar.state}></Bar>\r\n                    ))}\r\n                    </FlipMove>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    setBarState(idx,state){\r\n        let newArray= this.state.array\r\n        newArray[idx].state = state\r\n        this.setState({array:newArray})\r\n    }\r\n    swap(array,a,b)\r\n    {\r\n    let temp = array[a]\r\n    array[a] = array[b]\r\n    array[b] = temp\r\n    this.setState({array: array})\r\n    }\r\n    \r\n    async doBubbleSort(arr)\r\n    {\r\n        this.setState({running:true})\r\n        while(this.state.running == true){\r\n        var len = arr.length;\r\n        for (var i = 0; i < len ; i++) {\r\n          for(var j = 0 ; j < len - i - 1; j++){\r\n            this.setState({curr:j}) \r\n            let prevState = arr[j+1].state\r\n            this.setBarState(j+1,'compare')\r\n            await sleep(SLEEP)\r\n            this.setBarState(j+1,prevState)\r\n            if (arr[j].value < arr[j + 1].value) {\r\n                this.setState({curr:j+1})\r\n                this.swap(arr,j,j+1)\r\n                this.setBarState(j,'unsorted')\r\n                await sleep(SLEEP) \r\n            }\r\n            this.setState({array: arr})\r\n        }\r\n            this.setBarState(len-i-1,'sorted')\r\n        }\r\n        this.setBarState(0,'sorted')\r\n        this.setState({running:false})\r\n        }\r\n    }\r\n\r\n    async doSelectionSort(arr)\r\n    {\r\n        let n = arr.length;\r\n        for(let i = 0; i < n; i++) {\r\n            let min = i;\r\n            this.setBarState(min,'compare')\r\n            await sleep(SLEEP)\r\n            for(let j = i+1; j < n; j++){\r\n                this.setState({curr:j})\r\n                await sleep(SLEEP)\r\n                if(arr[j].value > arr[min].value) {\r\n                    this.setBarState(min,'unsorted')\r\n                    min=j; \r\n                    this.setBarState(min,'compare')\r\n                }\r\n             }\r\n             if (min !== i) {\r\n                 this.swap(arr,i,min)\r\n                 this.setBarState(i,'sorted')\r\n            }\r\n            this.setBarState(i,'sorted')\r\n        }\r\n    }\r\n\r\n    async doInsertionSort(arr){\r\n        for (let i = 1; i < arr.length; i++) {\r\n            let j = i - 1\r\n            this.setState({curr:j})\r\n            this.setBarState(j,'sorted')\r\n            await sleep(SLEEP)\r\n            let temp = arr[i]\r\n            this.setBarState(i,'compare')\r\n            await sleep(SLEEP)\r\n            this.setBarState(i,'sorted')\r\n            while (j >= 0 && arr[j].value < temp.value) {\r\n              arr[j + 1] = arr[j]\r\n              j--\r\n            }\r\n            arr[j+1] = temp\r\n            this.setBarState(j+1,'compare')\r\n            this.setBarState(j+1,'sorted')\r\n          }\r\n        this.setState({array:arr});\r\n    }\r\n\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) { // min and max included \r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  \r\nconst sleep = (milliseconds) => {\r\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}\r\n","import React, {Component} from 'react'\r\nimport SortingVisualizer from './SortingVisualizer.jsx'\r\nimport './style.css'\r\nexport default class App extends Component{\r\n    // eslint-disable-next-line\r\n    constructor(){\r\n        super()\r\n\r\n    }\r\n    render(){\r\n        return(\r\n                <SortingVisualizer></SortingVisualizer>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}